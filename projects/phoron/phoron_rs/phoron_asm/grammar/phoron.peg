Program <- Header eof

Header <- ClassDecl SuperDecl FieldDecl* MethodDecl*

## Classes

ClassDecl <- CLASS_keyword ClassAccessFlag* Name
ClassAccessFlag <- PUBLIC_keyword / FINAL_keyword / SUPER_keyword / INTERFACE_keyword / ABSTRACT_keyword / SYNTHETIC_keyword / ANNOTATION_keyword / ENUM_keyword / MODULE_keyword

SuperDecl <- SUPER_keyword Name

## Names

Name <- NameStart NameRest* skip
NameStart <- [_a-zA-Z<]
NameRest <- [_a-zA-Z0-9$<>/]

## Fields

FieldDecl <- FIELD_keyword FieldAccessFlag* Name FieldTypeDescriptor (EQUAL_symbol FieldDefaultValue)?
FieldAccessFlag <- PUBLIC_keyword / PRIVATE_keyword / PROTECTED_keyword / STATIC_keyword / FINAL_keyword / VOLATILE_keyword / TRANSIENT_keyword / SYNTHETIC_keyword / ENUM_keyword

FieldTypeDescriptor <- FieldType skip
FieldType <- BaseType / ObjectType / ArrayType
BaseType <- 'B' / 'C' / 'D' / 'F' / 'I' / 'J' / 'S' / 'Z'
ObjectType <- 'L' Name SEMICOLON_symbol
ArrayType <- LEFT_BRACKET_symbol ComponentType
ComponentType <- FieldType

FieldDefaultValue <- Float/ Integer / QuotedString

## Methods

MethodDecl <- METHOD_keyword MethodAccessFlag* Name MethodDescriptor Statement* END_keyword METHOD_END_keyword 

MethodAccessFlag <- PUBLIC_keyword / PRIVATE_keyword / PROTECTED_keyword / STATIC_keyword / FINAL_keyword / SYNCHRONIZED_keyword / BRIDGE_keyword / VARARGS_keyword / NATIVE_leyword
                / ABSTRACT_keyword / STRICT_keyword / SYNTHETIC_keyword

MethodDescriptor <- LEFT_PAREN_symbol ParameterDescriptor RIGHT_PAREN_symbol ReturnDescriptor skip
ParameterDescriptor <- FieldType?
ReturnDescriptor <- FieldType / VoidDescriptor
VoidDescriptor <- 'V'

Statement <- Directive/ Instruction / Label COLON_symbol

Directive <- StackDirective / LocalsDirective / ThrowsDirective / CatchDirective
StackDirective <- LIMIT_keyword STACK_keyword Integer
LocalsDirective <- LIMIT_keyword LOCALS_keyword Integer
ThrowsDirective <- THROWS_keyword Name 
CatchDirective <- CATCH_keyword Name FROM_keyword Label TO_keyword Label USING_keyword Label

Instruction <- SimpleInstruction / ComplexInstruction
SimpleInstruction <-  Ins Integer Integer / Ins Integer / Ins QuotedString
Ins <- Name
ComplexInstruction <- LookupSwitch/ TableSwitch
LookupSwitch <- LOOKUP_SWITCH_keyword LookupSwitchPair* DefaultSwitchPair
LookupSwitchPair <- Integer COLON_symbol Label 
TableSwitch <- TABLE_SWITCH_keyword (Low High Label+)? DefaultSwitchPair
Low <- Integer
High <- Integer
DefaultSwitchPair <- DEFAULT_keyword COLON_symbol Label

Label <- String

Integer <- [0-9]+ skip 

QuotedString <- DOUBLE_QUOTE_symbol String DOUBLE_QUOTE_symbol skip
String <- [_a-zA-Z]+

Float <- [0-9]+ DOT_symbol [0-9]+ skip


## Keywords

CLASS_keyword <- '.class' skip
SUPER_keyword <- '.super' skip
FIELD_keyword <- '.field' skip
METHOD_keyword <- '.method' skip
LIMIT_keyword <- '.limit' skip
THROWS_keyword <- '.throws' skip
CATCH_keyword <- '.catch' skip
END_keyword <- '.end' skip
METHOD_END_keyword <- 'method' skip
LOOKUP_SWITCH_keyword <- 'lookupswitch' skip
TABLE_SWITCH_keyword <- 'tableswitch' skip

ABSTRACT_keyword <- 'abstract' skip
ANNOTATION_keyword <- 'annotation' skip
BRIDGE_keyword <- 'bridge' skip
DEFAULT_keyword <- 'default' skip
ENUM_keyword <- 'enum' skip
FINAL_keyword <- 'final' skip
FROM_keyword <- 'from' skip
INTERFACE_keyword <- 'interface' skip
LOCALS_keyword <- 'locals' skip
MODULE_keyword <- 'module' skip
NATIVE_leyword <- 'native' skip
PRIVATE_keyword <- 'private' skip
PROTECTED_keyword <- 'protected' skip
PUBLIC_keyword <- 'public' skip
STATIC_keyword <- 'static' skip
STACK_keyword <- 'stack' skip
STRICT_keyword <- 'strict' skip
SYNCHRONIZED_keyword <- 'synchronized' skip
SYNTHETIC_keyword <- 'synthetic' skip
TO_keyword <- 'to' skip
TRANSIENT_keyword <- 'transient' skip
USING_keyword <- 'using' skip
VARARGS_keyword <- 'varargs' skip
VOLATILE_keyword <- 'volatile' skip

## Symbols

DOT_symbol <- '.' skip
DOUBLE_QUOTE_symbol <- '"'
EQUAL_symbol <- '=' skip
LEFT_BRACKET_symbol <- '['
LEFT_PAREN_symbol <- '('
RIGHT_PAREN_symbol <- ')'
SEMICOLON_symbol <- ';'
COLON_symbol <- ':'

skip <- [ \t\n]*
eof <- !.
